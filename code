#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <RTClib.h>

// Initialize the LCD and RTC
LiquidCrystal_I2C lcd(0x27, 16, 2);
RTC_DS3231 rtc;

// Define pins for LEDs and switches
const int ledPins[6] = {2, 3, 4, 5, 6, 7};
const int chamberSelectPin = 10;
const int hourSelectPin = 11;
const int minuteSelectPin = 12;
const int confirmPin = 13;
const int buzzerPin = A0;

// Variables to store time slots
int chamberTimes[6][2]; // [chamber][0] = hour, [chamber][1] = minute
int selectedChamber = 0;
bool alarmActive = false;

void setup() {
    // Initialize LCD
    lcd.init();
    lcd.backlight();
    
    // Initialize RTC
    if (!rtc.begin()) {
        lcd.print("Couldn't find RTC");
        while (1);
    }
    if (rtc.lostPower()) {
        rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    }

    // Initialize pins
    for (int i = 0; i < 6; i++) {
        pinMode(ledPins[i], OUTPUT);
    }
    pinMode(chamberSelectPin, INPUT_PULLUP);
    pinMode(hourSelectPin, INPUT_PULLUP);
    pinMode(minuteSelectPin, INPUT_PULLUP);
    pinMode(confirmPin, INPUT_PULLUP);
    pinMode(buzzerPin, OUTPUT);

    // Initialize chamber times to 0:00
    for (int i = 0; i < 6; i++) {
        chamberTimes[i][0] = 0;
        chamberTimes[i][1] = 0;
    }
}

void loop() {
    DateTime now = rtc.now();
    lcd.setCursor(0, 0);
    lcd.print(now.hour(), DEC);
    lcd.print(':');
    lcd.print(now.minute(), DEC);
    lcd.print(':');
    lcd.print(now.second(), DEC);

    // Chamber selection
    if (digitalRead(chamberSelectPin) == LOW) {
        selectedChamber = (selectedChamber + 1) % 6;
        delay(200); // Debounce delay
    }

    // Hour selection
    if (digitalRead(hourSelectPin) == LOW) {
        chamberTimes[selectedChamber][0] = (chamberTimes[selectedChamber][0] + 1) % 24;
        delay(100); // Debounce delay
    }

    // Minute selection
    if (digitalRead(minuteSelectPin) == LOW) {
        chamberTimes[selectedChamber][1] = (chamberTimes[selectedChamber][1] + 1) % 60;
        delay(100); // Debounce delay
    }

    // Confirmation
    if (digitalRead(confirmPin) == LOW) {
      if(alarmActive == false){
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Time is set");
        delay(2000); // Display message for 2 seconds
        lcd.clear();
      }
      else if (alarmActive == true){
        alarmActive = false;
        delay(200); // Debounce delay
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("THANK YOU");
        lcd.setCursor(0, 1);
        lcd.print("Next Schedule On");
        delay(2000); // Display message for 2 seconds
        lcd.clear();
      }
    }

    // Display selected chamber and time
    lcd.setCursor(0, 1);
    lcd.print("Chamber ");
    lcd.print(selectedChamber + 1);
    lcd.print(": ");
    lcd.print(chamberTimes[selectedChamber][0]);
    lcd.print(':');
    lcd.print(chamberTimes[selectedChamber][1]);

    // Update LEDs
    for (int i = 0; i < 6; i++) {
        digitalWrite(ledPins[i], i == selectedChamber ? HIGH : LOW);
    }

    // Check for alarm
    if (now.hour() == chamberTimes[selectedChamber][0] && now.minute() == chamberTimes[selectedChamber][1] && now.second() == 0) {
        alarmActive = true;
        delay(200); // Debounce delay
        for (int i = 0; i < 6; i++) {
          digitalWrite(ledPins[i], i == selectedChamber ? HIGH : LOW);
        }
    }

    // Activate buzzer if alarm is active
    if (alarmActive) {
        digitalWrite(buzzerPin, HIGH);
        delay(100);
    } else {
        digitalWrite(buzzerPin, LOW);
    }
}
